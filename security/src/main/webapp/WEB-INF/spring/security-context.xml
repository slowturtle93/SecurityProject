<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:security="http://www.springframework.org/schema/security"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
							http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
							
                                 
       <context:component-scan base-package="com.khs.pjt"/>
        
        <security:http auto-config="true" use-expressions="true">
        	<!-- intercept-url : ant 경로 스타일 구문을 사용하여 수신 요청의 URL과 일치하는 패턴을 정의 -->
            <security:intercept-url pattern="/member/**" access="hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')"/>
		    <security:intercept-url pattern="/user/**"   access="hasAnyRole('ROLE_USER','ROLE_MEMBER','ROLE_ADMIN')"/>
		    <security:intercept-url pattern="/admin/**"  access="hasRole('ROLE_ADMIN')"/>
		    <security:intercept-url pattern="/**"        access="permitAll"/>
            
            <!-- form-login 
            UsernamePasswordAuthenticationFilter를 필터 스택에 추가하고 LoginUrlAuthenticationEntryPoint를 애플리케이션 컨텍스트에 추가하여 요청시 인증을 제공하는 데 사용
            
            username-parameter : 사용자 이름이 포함된 요청 매개 변수의 이름
            password-parameter : 비밀번호를 포함하는 요청 매개 변수의 이름
            login-processing-url : 로그인 양식이 게시되는 URL 
            login-page : 로그인 페이지의 URL, 로그인 URL이 지정되지 않은 경우 Spring Security는 /login에 로그인 URL과 요청 시 해당 로그인 URL을 랜더링하는 해당 필터를 자동 생성
            default-target-url : 사용자의 이전 작업을 재개 할 수 없는 경우 인증 성공 후 redriect 될 URL,
            일반적으로 사용자가 인증을 트리거하는 보안 작업을 먼저 요청하지 않고 로그인 페이지를 방문하는 경우 발생
            authentication-failure-handler-ref : 실패한 인증 요청을 처리하는 데 사용되어야하는 AuthenticationFailureHandler 빈에 대한 참조
           -->
            <security:form-login
		    	username-parameter   = "loginId"
		        password-parameter   = "loginPwd"
		        login-processing-url = "/login"  
		        login-page           = "/loginPage"
		        default-target-url   = "/"
		        authentication-failure-handler-ref="loginFailureHandler"
		    /> 
		    
		    <!-- access-denied-handler
		    error-page 인증 된 사용자가 액세스 권한이 없는 페이지를 요청하는 경우 리다이렉션되는 액세스 거부 페이지 -->
		    <security:access-denied-handler
		    	error-page="/access_denied_page"
		    />
		    
		    <!-- logout
		    delete-cookies 사용자가 로그아웃할 때 삭제해야하는 쿠키이름의 쉼표로 구분 된 목록
		    logout-url : 로그아웃을 유발할 URL
		    invalidate-session : SecurityContextLogoutHandler의 invalidateHttpSession에 매핑, 기본값은 "true"이므로 로그아웃 시 세션이 무효화
		    logout-success-url : 사용자가 로그아웃 후 연결되는 URL
		     -->
		    <security:logout
		    	logout-url="/logout"
		    	invalidate-session="true"
		    	logout-success-url="/"
		    />
		    
        </security:http>
        
		<security:authentication-manager> <!-- 응용 프로그램에 인증 서비스를 제공하는 AuthenticationManager 등록을 담당 -->
		    <security:authentication-provider user-service-ref="userService"/> <!-- DaoAuthenticationProvider 빈을 생성 -->
		    																   <!-- DaoAuthenticationProvider는 UserDetailsService에서 사용자 정보를 로드하고 사용자 이름/암호 조합을 로그인시 제공된 값과 비교 -->
		    <security:authentication-provider ref="userAuthProvider"/>
		</security:authentication-manager>
		
		<bean id="userService"      class="com.khs.pjt.Web.service.CustomUserDetailsService"/>
        <bean id="userAuthProvider" class="com.khs.pjt.Web.resolver.CustomAuthenticationProvider"/>
        
        <bean id="loginFailureHandler" class="com.khs.pjt.handler.LoginFailureHandler">
		    <property name="loginidname" value="loginId"/>
		    <property name="loginpwdname" value="loginPwd"/>
		    <property name="errormsgname" value="ERRORMSG"/>
		    <property name="defaultFailureUrl" value="/loginPage?error"/>
		</bean>



</beans>
